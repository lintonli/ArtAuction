@page "/Biddings"
@inject HttpClient http;
@inject NavigationManager Navigation;
@inject IJSRuntime _jsRuntime;
@inject BidService bidService;
@inject ProductService productService;
@inject TokenProvider tokenProvider;
<h3>My Biddings</h3>

<div class="container">
    <div class="nav">
        <div class="logo">

            <p>Eddy'sEd</p>
            <span class="material-icons menu_toggle" @onclick=toogleMenu>menu</span>

        </div>
      
        <div class="end">
            <div class="out">
                <img src="/Icons/logout_FILL0_wght400_GRAD0_opsz24.svg" alt="" />

            </div>
            <div @onclick=Logout>Logout</div>
        </div>
    </div>
    @* <div class="sidjjebar">
        <div class="icon">
            <img src="/Icons/team_dashboard_FILL0_wght400_GRAD0_opsz24.svg" alt="" />

            <a href="/Bidder">Dashboard</a>

        </div>
        <div class="icon">
            <img src="/Icons/gavel_FILL0_wght400_GRAD0_opsz24.svg" alt="" />
            <a href="/Biddings">My Biddings</a>
        </div>
        <div class="icon">
            <img src="/Icons/orders_FILL0_wght400_GRAD0_opsz24.svg" alt="" />
            <a href="/Checkout">Orders</a>
        </div>
        <div class="icon">
            <img src="/Icons/manage_accounts_FILL0_wght400_GRAD0_opsz24.svg" alt="" />
            <a href="/account">Account</a>
        </div>
    </div> *@
    <div class="d-flex gap-2">
        <div class="nav1">
         <Navbar></Navbar>

        </div>
        <div class="body">

            <div class="biddings">

        
            @if (bids != null)
            {


                @foreach (var bid in bids)
                {
                    <div class="items">


                        <img src="@GetProducts(bid.ProductId).Image"/>
                        <span class=" d-flex">
                            <label for="">Name:</label>
                            <p>@GetProducts(bid.ProductId).Name</p>
                        </span>
                        <span class=" d-flex">
                            <label for="">Description:</label>
                            <p>@GetProducts(bid.ProductId).Description</p>
                        </span>
                        <span class=" d-flex">
                            <label for="">Status:</label>
                            <p>@GetProducts(bid.ProductId).BiddingState</p>
                        </span>
                        <span class=" d-flex">
                            <label for="">HighestBid:</label>
                            <p>@GetProducts(bid.ProductId).HighestBid</p>
                        </span>
                        @if (GetProducts(bid.ProductId).BiddingState == "Active")
                        {
                            <button @onclick="()=> BidAgain(bid.ProductId)">Bid Again</button>
                        }
                        else if(GetProducts(bid.ProductId).BiddingState=="Closed" && GetProducts(bid.ProductId).Id == bid.UserId)
                        {
                            <button @onclick="()=> Checkout(bid.ProductId)">Check Out</button>
                        }
                    </div>

                }
            }

      
        </div>

    </div>
    </div>
   
</div>
@code {


    public List<Product> Products { get; set; } = new List<Product>();
    public List<Bid> bids{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        Products = await productService.GetProductsAsync();
        bids = await bidService.GetBidbUserId();
    }
    public Product GetProducts(Guid ProductId)
    {
        var prod = Products.Find(x => x.Id == ProductId);
        return prod ?? new Product();
    }

    private void Checkout(Guid Id)
    {
       
        Navigation.NavigateTo($"/Checkout");
    }
    

    private void BidAgain(Guid Id)
    {
        
        Navigation.NavigateTo($"/ViewItem/{Id}");
    }
    public void toogleMenu()
    {
        _jsRuntime.InvokeVoidAsync("toogle_menu");
    }
    public async Task Logout()
    {

        await tokenProvider.RemoveItemAsync();
        Navigation.NavigateTo("/");

    }

}
