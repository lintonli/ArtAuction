@page "/Biddings"
@inject HttpClient http;
@inject NavigationManager Navigation;
@inject IJSRuntime _jsRuntime;
<h3>My Biddings</h3>

<div class="container">
    <div class="nav">
        <div class="logo">

            <p>Eddy'sEd</p>
            <span class="material-icons menu_toggle" @onclick=toogleMenu>menu</span>

        </div>
      
        <div class="end">
            <div class="out">
                <img src="/Icons/logout_FILL0_wght400_GRAD0_opsz24.svg" alt="" />

            </div>
            <a href="/">Logout</a>
        </div>
    </div>
    @* <div class="sidjjebar">
        <div class="icon">
            <img src="/Icons/team_dashboard_FILL0_wght400_GRAD0_opsz24.svg" alt="" />

            <a href="/Bidder">Dashboard</a>

        </div>
        <div class="icon">
            <img src="/Icons/gavel_FILL0_wght400_GRAD0_opsz24.svg" alt="" />
            <a href="/Biddings">My Biddings</a>
        </div>
        <div class="icon">
            <img src="/Icons/orders_FILL0_wght400_GRAD0_opsz24.svg" alt="" />
            <a href="/Checkout">Orders</a>
        </div>
        <div class="icon">
            <img src="/Icons/manage_accounts_FILL0_wght400_GRAD0_opsz24.svg" alt="" />
            <a href="/account">Account</a>
        </div>
    </div> *@
    <div class="d-flex gap-2">
        <div class="nav1">
         <Navbar></Navbar>

        </div>
    <div class="body">
        @if (Products != null && Products.Any())
        {
            @foreach(var Prod in Products)
            {
                <div class="item">
                    <img src="@Prod.Image" alt="" />
                    <h2>@Prod.Name</h2>
                    <p>Highest Bid: @Prod.HighestBid</p>
                    <p>My bid: @Prod.Price</p>
                    <p>Status:@GetStatus(Prod.EndTime)</p>

                    @if (Prod.BiddingState=="Closed" && Prod.IsWinner)
                    {
                        <button @onclick="() => ProceedToCheckout(Prod.Id)">Checkout</button>
                    }
                    else if(IsBiddingActive(Prod.EndTime))
                    {
                        <button @onclick="() => BidAgain(Prod.Id)">Bid Again</button>
                    }

                </div>

            }
        }
        else
        {
            <p>No biddings found......</p>
        }
    </div>


    </div>
   
</div>
@code {
    public List<Product> Products { get; set; } = new List<Product>();


    protected override async Task OnInitializedAsync()
    {

        var Product = await http.GetFromJsonAsync<List<Product>>("sample-data/Product.json");

        if (Product.Any())
        {
            Products = Product;
        }
    }
    private bool IsBiddingActive(DateTime end)
    {
        return end > DateTime.Now;
    }
   
    private string GetStatus(DateTime dateTime)
    {
        var timing = dateTime - DateTime.Now;
        return timing > TimeSpan.Zero ? "Active" : "Closed";
    }
    private void ProceedToCheckout(Guid Id)
    {
       
        Navigation.NavigateTo($"/Checkout");
    }

    private void BidAgain(Guid Id)
    {
        
        Navigation.NavigateTo($"/ViewItem/{Id}");
    }
    public void toogleMenu()
    {
        _jsRuntime.InvokeVoidAsync("toogle_menu");
    }

}
