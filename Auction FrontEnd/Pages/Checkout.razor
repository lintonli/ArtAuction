@page "/Checkout"
@inject HttpClient http;
@inject NavigationManager navigation;

<h3>Orders</h3>
<div class="container">
    <div class="nav">
        <div class="logo">

            <p>Eddy'sEd</p>
        </div>
    
        <div class="end">
            <div class="out">
                <img src="/Icons/logout_FILL0_wght400_GRAD0_opsz24.svg" alt="" />

            </div>
            <a href="/">Logout</a>
        </div>
    </div>
    <div class="sidjjebar">
        <div class="icon">
            <img src="/Icons/team_dashboard_FILL0_wght400_GRAD0_opsz24.svg" alt="" />

            <a href="/Dashboard">Dashboard</a>

        </div>
        <div class="icon">
            <img src="/Icons/gavel_FILL0_wght400_GRAD0_opsz24.svg" alt="" />
            <a href="/Biddings">My Biddings</a>
        </div>
        <div class="icon">
            <img src="/Icons/orders_FILL0_wght400_GRAD0_opsz24.svg" alt="" />
            <a href="/Order">Orders</a>
        </div>
        <div class="icon">
            <img src="/Icons/manage_accounts_FILL0_wght400_GRAD0_opsz24.svg" alt="" />
            <a href="/account">Account</a>
        </div>
    </div>
    <div class="body">
        @if(wonProducts != null && wonProducts.Any())
        {
            foreach(var product in wonProducts)
            {
                <div class="item">
                    <img src="@product.Image" alt=""/>
                    <div class="item-details">
                        <h2>@product.Name</h2>
                        <p>Amount: @product.Price$</p>
                        <button class="btn" @onclick="() => ProcessPayment(product)">Pay Now</button>
                    </div>
                </div>
            }
        }
    </div>
</div>
@code {
    public List<Product> wonProducts { get; set; } = new List<Product>();

    //[Parameter]
    //public Guid Id{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        var products = await http.GetFromJsonAsync<List<Product>>("sample-data/Product.json");
        wonProducts = products.Where(p => p.BiddingState=="Closed" && p.IsWinner).ToList();
    }

    private void ProcessPayment(Product product)
    {
        // Implement the logic to process the payment
        // For now, it could simply navigate to a confirmation page
        navigation.NavigateTo("/PaymentConfirmation");
    }
}
