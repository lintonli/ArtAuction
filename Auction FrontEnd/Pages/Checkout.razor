@page "/Checkout"
@inject HttpClient http;
@inject NavigationManager navigation;
@inject BidService bidService;
@inject ProductService productService;
@inject TokenProvider tokenProvider;

<h3>Orders</h3>
<div class="container">
    <div class="nav">
        <div class="logo">

            <p>Eddy'sEd</p>
        </div>
    
        <div class="end">
            <div class="out">
                <img src="/Icons/logout_FILL0_wght400_GRAD0_opsz24.svg" alt="" />

            </div>
            <div @onclick=Logout>Logout</div>
        </div>
    </div>
    <div class="sidjjebar">
        <div class="icon">
            <img src="/Icons/team_dashboard_FILL0_wght400_GRAD0_opsz24.svg" alt="" />

            <a href="/Dashboard">Dashboard</a>

        </div>
        <div class="icon">
            <img src="/Icons/gavel_FILL0_wght400_GRAD0_opsz24.svg" alt="" />
            <a href="/Biddings">My Biddings</a>
        </div>
        <div class="icon">
            <img src="/Icons/orders_FILL0_wght400_GRAD0_opsz24.svg" alt="" />
            <a href="/Order">Orders</a>
        </div>
        <div class="icon">
            <img src="/Icons/manage_accounts_FILL0_wght400_GRAD0_opsz24.svg" alt="" />
            <a href="/account">Account</a>
        </div>
    </div>
    <div class="body">
        
        
            @foreach (var bid in bids)
            {
                <div class="item">
                    <img src="@GetProducts(bid.ProductId).Image" alt="" />
                    <div class="item-details">
                    <h2>@GetProducts(bid.ProductId).Name</h2>
                    <p>@GetProducts(bid.ProductId).HighestBid</p>
@*                         <button class="btn" @onclick="() => ProcessPayment(bid.Id)">Pay Now</button> *@
                    </div>
                </div>
            }
        
    </div>
</div>
@code {
    public string Id{ get; set; }
    public List<Product> Products { get; set; } = new List<Product>();
    public List<Bid> bids { get; set; }

    //[Parameter]
    //public Guid Id{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        Products = await productService.GetProductsAsync();
        bids = await bidService.GetBidbUserId();
    }
    public Product GetProducts(Guid ProductId)
    {
        var prod = Products.Find(x => x.Id == ProductId);
        return prod ?? new Product();
    }
    private void ProcessPayment(Product product)
    {
        // Implement the logic to process the payment
        // For now, it could simply navigate to a confirmation page
        navigation.NavigateTo("/PaymentConfirmation");
    }
    public async Task Logout()
    {

        await tokenProvider.RemoveItemAsync();
        navigation.NavigateTo("/");

    }
}
