@page "/LogIn"
@inject HttpClient http;
@inject NavigationManager NavigationManager;
@inject IJSRuntime _jsRuntime;
@inject AuthService authentication;


<div class="container">
    @* <div class="image">
        <img src="/deco5.jpg"/>
    </div> *@
    <div class="form">
        <EditForm Model="@(IsRegister ? user : GetLoginuser)" OnInvalidSubmit="HandleSubmit">
        
        <h1>@(IsRegister ? "Register" : "Login")</h1>
        @if (IsRegister)
        {


            <div class="form-group">
                <label for="Name">Name</label>
                <input type="text" class="form-control" @bind-value="user.Name" id="Name" placeholder="User Name">
            </div>

            <div class="form-group">
                <label for="Email">Email</label>
                <input type="email" class="form-control" @bind-value="user.Email" id="Description" placeholder="User Email">
            </div>
               

            <div class="form-group">
                <label for="PhoneNumber">Phone Number</label>
                <input type="tel" class="form-control" @bind-value="user.PhoneNumber" id="PhoneNumber" placeholder="User Number">
            </div>

            <div class="form-group">
                <label for="Password">Password</label>
                <input type="password" class="form-control" @bind-value="user.Password" id="Password" placeholder="User Password">
            </div>
            <button type="button" @onclick="Register" class="mt-4 btn btn-primary">Register</button>
            <p class="mt-2">Already a member? <button @onclick="ToggleForm" class="btn btn-link">Login</button></p>
        }

        else
        {
            <div class="form-group">
                <label for="Email">Email</label>
                <input type="email" class="form-control" @bind-value="GetLoginuser.UserName" id="Description" placeholder="User Email">
            </div>
            <div class="form-group">
                <label for="Password">Password</label>
                <input type="password" class="form-control" @bind-value="GetLoginuser.Password" id="Password" placeholder="User Password">
            </div>
            <button type="button" @onclick="LoginUser" class="mt-4 btn btn-primary">Login</button>
            <p class="mt-2">Not a member yet? <button @onclick="ToggleForm" class="btn btn-link">Register</button></p>
        }
        </EditForm>
    </div>

</div>



@code {
    public List<User> Users { get; set; } = new List<User>();
    public User user { get; set; } = new User();
    public LogInUser GetLoginuser { get; set; } = new LogInUser();
    public bool IsRegister { get; set; } = false;

    [Parameter]
    public EventCallback<User> RegUser { get; set; }
    // protected override async Task OnInitializedAsync()
    // {
    //     var users = await http.GetFromJsonAsync<List<User>>("sample-data/User.json");
    //     if (users.Any())
    //     {
    //         Users = users;
    //     }
    // }
    public async void Register()
    {
        // await RegUser.InvokeAsync(user);
        //NavigationManager.NavigateTo("/");
        var registerrequest = new User()
            {
                Name = user.Name,
                Email = user.Email,
                PhoneNumber = user.PhoneNumber,
                Password = user.Password
            };
            await authentication.Register(registerrequest);
            await RegUser.InvokeAsync(user);
            await _jsRuntime.InvokeVoidAsync("ShowMessage", "Success");
            NavigationManager.NavigateTo("/");
    }
    public async Task LoginUser()
    {
        var loginRequest = new LogInUser()
            {
                UserName = GetLoginuser.UserName,
                Password = GetLoginuser.Password
            };
        var response = await authentication.Login(loginRequest);
      

        if(!string.IsNullOrEmpty(response.Token))
        {
            await _jsRuntime.InvokeVoidAsync("ShowMessage", "success", $"Welcome, {GetLoginuser.UserName}");
            NavigationManager.NavigateTo("/Dashboard");
        }
        //if(Users!= null)
        //{
          //  await _jsRuntime.InvokeVoidAsync("ShowMessage", "success", $"Welcome, {user.Name}");
          //
            //NavigationManager.NavigateTo("/Dashboard");
        //}
        else
        {
            await _jsRuntime.InvokeVoidAsync("ShowMessage", "error", "Invalid Credentials");
        }

      
    }

    private void ToggleForm()
    {
        IsRegister = !IsRegister;
    }
    public async void HandleSubmit()
    {
        if (IsRegister)
        {
            await LoginUser();
        }
        else
        {
            Register();
        }
    }

}
