@page "/Dashboard"
@using System.Text
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.Authorization
@inject HttpClient http;
@inject NavigationManager Navigation;
@inject TokenProvider tokenProvider;
@inject IJSRuntime _jsRuntime;
@inject ProductService productService;
@attribute [Authorize]
<div class="container">
    <div class="nav">
        <div class="logo">

            <p>Eddy'sEd</p>
        </div>
        <a href="/MyProducts">Sell</a>
        <div class="end">
            <div class="out">
                <img src="/Icons/logout_FILL0_wght400_GRAD0_opsz24.svg" alt="" />

            </div>
            <div @onclick=Logout>Logout</div>
        </div>
    </div>
    <div class="body d-flex">
       <div>
            <div class="d-flex justify-content-between align-items-center">
                <h1>Top Auctions</h1>
                <span class="material-icons menu_toggle" @onclick=toogleMenu>menu</span>


            </div>
            <Navbar></Navbar>
       </div>
        <div class="display_arts">
            <div class="top">
                <img src="/Tp1.jpg" alt="" />
            </div>
            <div class="info">
                <div class="info1">
                    <p>Art of the lady of scotland</p>
                    <div class="bid">
                        <p>Highest Bid:@product.HighestBid</p>

                    </div>
                    <div class="bid1">
                        <p>Start Price: @product.Price</p>

                    </div>
                    <button class="btn">View Item</button>
                </div>
                <div class="info2">
                    <p>@GetTimeRemaining(product.EndTime)</p><br />
                    <h2>@GetBiddingStatus(product.EndTime)</h2>
                    <button class="now" @onclick="() => Bid(product.Id)">Bid Now</button>

                </div>
            </div>
            <div class="search">
                <input type="text" id="search" @bind="searchTerm" @bind:event="oninput" />
                <img src="/Icons/manage_search_FILL0_wght400_GRAD0_opsz24.svg" />
            </div>

            <div class="items">
               @if(FilteredProducts()==null)
               {
                    <p>Loading products...</p>
                }else{
                    @foreach (var prods in FilteredProducts())
                    {
                        <div class="item1">
                            <div class="info3">
                                <img src="@prods.Image" alt="" />
                                <h1>@prods.Name</h1>
                                <div class="stat">
                                    <h3>Highest bid: @prods.HighestBid</h3>
                                    <p>@prods.BiddingState</p>
                                </div>
                                <div class="stat2">
                                    <h3>Start bid: @prods.Price</h3>
                                    <button class="btn" @onclick="(e => ViewItem(prods.Id))">View Item</button>
                                </div>

                            </div>

                        </div>

                    }
                }
            </div>
        </div>
            
           
    </div>
</div>
@code{
    public List<Product> products { get; set; } = new List<Product>();
    public Product product { get; set; } = new Product();
    private string searchTerm = string.Empty;

    [Parameter]
    public EventCallback OnShowMenu { get; set; }

    protected async override Task OnInitializedAsync()
    {
        products = await productService.GetProductsAsync();
    }
    public IEnumerable<Product> FilteredProducts()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            return products; // Return all products if the search term is empty
        }

        // Search by name or category (assuming your Product model has a Category property)
        return products.Where(p => p.Name.ToLower().Contains(searchTerm.ToLower()));

    }


    public void Bid(Guid Id){
        Navigation.NavigateTo($"/ViewItem/{Id}");

    }
    public void ViewItem(Guid Id){
        Navigation.NavigateTo($"/ViewItem/{Id}");
    }
    private string GetTimeRemaining(DateTime date){
        var timeremaining = date - DateTime.Now;
        return $"{timeremaining.Days:D2}D:{timeremaining.Hours:D2}H:{timeremaining.Minutes:D2}M:{timeremaining.Seconds:D2}S";
    }
    private string GetBiddingStatus(DateTime date){
        var timing = date - DateTime.Now;
        return timing > TimeSpan.Zero ? "Bid Open" : "Bidding Closed";
    }

    public void toogleMenu()
    {
        _jsRuntime.InvokeVoidAsync("toogle_menu");
    }

    public async Task Logout()
    {

        await tokenProvider.RemoveItemAsync();
        Navigation.NavigateTo("/");

    }
    
    

}
